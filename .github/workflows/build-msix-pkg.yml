# This workflow will build, sign, and package a WinUI 3 MSIX desktop application
# built on .NET.

name: MyHomeAudio WinUI 3 MSIX app

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, x86]
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      Solution_Name: MyHomeAudio/MyHomeAudio.csproj

    steps:
    - name: Check Release Condition1
      if: ${{ vars.REL_VERSION != '' }}
      run:  echo "This will be released as ${{vars.REL_VERSION}}${{ matrix.platform }}"

      
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.RKOS_SW_CERT }}")
        $certificatePath = "MyHomeAudio/GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        $pwd = ConvertTo-SecureString ${{ secrets.MY_PWD }} -AsPlainText -Force
        Import-PfxCertificate -CertStoreLocation Cert:\CurrentUser\My -FilePath $certificatePath -Password $pwd
        Remove-Item -path $certificatePath
        

    # Create the app package by building and packaging the project
    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:PublishReadyToRun=false /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true 
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

    # Remove the pfx
    #- name: Remove the pfx
    #  run: Remove-Item -path GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload MSIX package
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: MyHomeAudio\\Packages\MyHomeAudio_*\*.msix


    - name: Check Release Condition3
      if: ${{ vars.REL_VERSION == ''}}
      run:  dir -s

    - name: Create tag
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/${{ vars.REL_VERSION }}${{ matrix.platform }}',
            sha: context.sha
          })
      if: ${{ vars.REL_VERSION != '' }}

    - name: Make Release
      uses: ncipollo/release-action@v1
      if: ${{ vars.REL_VERSION != '' }}
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ vars.REL_VERSION  }}${{ matrix.platform }}
        draft: false
        artifacts: MyHomeAudio\\Packages\MyHomeAudio_*\*.msix     

  make_combined_release:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Retrieve build artefacts
        uses: actions/download-artifact@v2
        with:
          name: MSIX Package
          path: artefacts

      - name: list
        run: dir -s
              
